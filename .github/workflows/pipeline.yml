name: CI/CD Pipeline

on:
    push:
        branches:
            - main
            - develop

jobs:
    build-and-deploy-frontend:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20.6.1

            - name: Install dependencies
              working-directory: pid-ui
              run: npm install

            - name: Build frontend
              working-directory: pid-ui
              run: npm run build

            - name: Deploy frontend to production
              if: github.ref == 'refs/heads/main' # Deploy only from main branch
              working-directory: pid-ui
              run: |
                  steps:
                      - uses: actions/checkout@v2
                      - name: Install Vercel CLI
                        run: npm install --global vercel@latest
                      - name: Pull Vercel Environment Information
                        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
                      - name: Build Project Artifacts
                        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
                      - name: Deploy Project Artifacts to Vercel
                        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

            - name: Deploy frontend to staging
              if: github.ref == 'refs/heads/develop' # Deploy from develop branch
              working-directory: pid-ui
              run: |
                  steps:
                    - uses: actions/checkout@v2
                    - name: Install Vercel CLI
                      run: npm install --global vercel@latest
                    - name: Pull Vercel Environment Information
                      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
                    - name: Build Project Artifacts
                      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
                    - name: Deploy Project Artifacts to Vercel
                      run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

    test-backend:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: 3.x

            - name: Install Poetry
              working-directory: pid-be
              run: pip install poetry

            - name: Build backend
              working-directory: pid-be
              run: poetry install

            - name: Install firebase
              working-directory: pid-be
              run: npm install -g firebase-tools

            - name: Run Backend
              env:
                  ENV: ${{ secrets.ENV }}
                  REGISTER_URL: ${{ secrets.REGISTER_URL }}
                  LOGIN_URL: ${{ secrets.LOGIN_URL }}
                  PROJECT_ID: ${{ secrets.PROJECT_ID }}
                  PRIVATE_KEY_ID: ${{ secrets.PRIVATE_KEY_ID }}
                  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
                  CLIENT_EMAIL: ${{ secrets.CLIENT_EMAIL }}
                  CLIENT_ID: ${{ secrets.CLIENT_ID }}
                  AUTH_URI: ${{ secrets.AUTH_URI }}
                  TOKEN_URI: ${{ secrets.TOKEN_URI }}
                  AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}
                  CLIENT_X509_CERT_URL: ${{ secrets.CLIENT_X509_CERT_URL }}
                  UNIVERSE_DOMAIN: ${{ secrets.UNIVERSE_DOMAIN }}
                  FIREBASE_AUTH_EMULATOR_HOST: ${{ secrets.FIREBASE_AUTH_EMULATOR_HOST }}
                  FIRESTORE_EMULATOR_HOST: ${{ secrets.FIRESTORE_EMULATOR_HOST }}
              working-directory: pid-be
              run: poetry run start &

            - name: Run emualtors and backend tests
              env:
                  PROJECT_ID: ${{ secrets.PROJECT_ID }}
                  PRIVATE_KEY_ID: ${{ secrets.PRIVATE_KEY_ID }}
                  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
                  CLIENT_EMAIL: ${{ secrets.CLIENT_EMAIL }}
                  CLIENT_ID: ${{ secrets.CLIENT_ID }}
                  AUTH_URI: ${{ secrets.AUTH_URI }}
                  TOKEN_URI: ${{ secrets.TOKEN_URI }}
                  AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}
                  CLIENT_X509_CERT_URL: ${{ secrets.CLIENT_X509_CERT_URL }}
                  UNIVERSE_DOMAIN: ${{ secrets.UNIVERSE_DOMAIN }}
                  FIREBASE_AUTH_EMULATOR_HOST: ${{ secrets.FIREBASE_AUTH_EMULATOR_HOST }}
                  FIRESTORE_EMULATOR_HOST: ${{ secrets.FIRESTORE_EMULATOR_HOST }}
              working-directory: pid-be
              run: firebase emulators:exec "poetry run pytest"
